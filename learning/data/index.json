{
    "(define (domain blocks_world)\n    (:requirements :strips :derived-predicates :disjunctive-preconditions :equality)\n\n    (:predicates \n        ; type/static predicates\n        (arm ?arm)\n        (block ?block)\n        (table ?table)\n        ; find-table-place and find-block-place\n        (worldpose ?block ?X_WB)\n        ; find-grasp\n        (handpose ?block ?X_HB)\n        (conf ?arm ?q)\n        (graspconf ?arm ?q); we dont plan motions with these\n\n        ; stream certified\n        ; find-ik\n        (ik ?arm ?block ?X_WB ?X_HB ?pre_q ?q)\n        ; find-motion\n        (motion ?arm ?q1 ?traj ?q2)\n        ; check-colfree-block\n        ; if arm is at q and item at X_WI, are there collisions \n        (colfree-block ?arm ?q ?block ?X_WB)\n        ; check-colfree-arms\n        ; if arm1 is at q1, and arm2 is at q2, are there collisions?\n        (colfree-arms ?arm1 ?q1 ?arm2 ?q2)\n        ; find-table-place\n        (table-support ?block ?X_WB ?table)\n        ; find-block-place\n        (block-support ?upperblock ?X_WU ?lowerblock ?X_WL)\n\n        ; fluents \n        (empty ?arm)\n        (atconf ?arm ?q)\n        (atworldpose ?block ?X_WB)\n        (athandpose ?arm ?block ?X_HB)\n        (clear ?block)\n\n        ;derived\n        (block-safe ?arm ?q ?block)\n        (on-block ?upperblock ?lowerblock)\n        (on-table ?block ?table)\n        (on-any-table ?block ?X_WB)\n    )\n\n    (:derived (on-table ?block ?table) \n        (exists (?X_WB) (and\n                (table-support ?block ?X_WB ?table) \n                (atworldpose ?block ?X_WB)\n            )\n        )\n    )\n\n    ; if block was at X_WB, would it be on any table\n    (:derived (on-any-table ?block ?X_WB) \n        (exists (?table) (and\n                (table-support ?block ?X_WB ?table)\n            )\n        )\n    )\n\n    (:derived (block-safe ?arm ?q ?block) \n        (or\n            (exists (?X_HB)\n                (and\n                    (handpose ?block ?X_HB)\n                    (athandpose ?arm ?block ?X_HB)\n                )\n            ) \n            (exists (?X_WB)\n                (and\n                    (colfree-block ?arm ?q ?block ?X_WB)\n                    (atworldpose ?block ?X_WB) \n                ) \n            ) \n        )\n    )\n\n    (:derived (on-block ?upperblock ?lowerblock)\n        (exists (?X_WL ?X_WU)\n            (and\n                (block-support ?upperblock ?X_WU ?lowerblock ?X_WL)\n                (atworldpose ?lowerblock ?X_WL)\n                (atworldpose ?upperblock ?X_WU)\n            )\n        )\n    )\n\n    (:action pick  ;off of a table\n        :parameters (?arm ?block ?X_WB ?X_HB ?pre_q ?q)\n        :precondition (and\n            (clear ?block)\n            (ik ?arm ?block ?X_WB ?X_HB ?pre_q ?q)\n            (atworldpose ?block ?X_WB)\n            (empty ?arm)\n            (atconf ?arm ?pre_q)\n            (on-any-table ?block ?X_WB)\n            (forall (?otherblock)\n                (imply \n                    (block ?otherblock) \n                    (block-safe ?arm ?q ?otherblock)\n                ) \n            )\n        ) \n        :effect (and\n            (athandpose ?arm ?block ?X_HB)\n            (not (atworldpose ?block ?X_WB))\n            (not (empty ?arm))\n        )\n    )\n\n    (:action move\n        :parameters (?arm ?q1 ?traj ?q2) \n        :precondition (and\n            (motion ?arm ?q1 ?traj ?q2) \n            (atconf ?arm ?q1)\n        )\n        :effect (and\n            (atconf ?arm ?q2)\n            (not (atconf ?arm ?q1))\n        )\n    )\n\n    (:action place ; place block on table\n        :parameters (?arm ?block ?X_WB ?X_HB ?pre_q ?q) \n        :precondition (and\n            (ik ?arm ?block ?X_WB ?X_HB ?pre_q ?q)\n            (athandpose ?arm ?block ?X_HB)\n            (atconf ?arm ?pre_q)\n            (on-any-table ?block ?X_WB)\n            (forall (?otherblock)\n                (imply \n                    (block ?otherblock) \n                    (block-safe ?arm ?q ?otherblock)\n                ) \n            )\n        ) \n        :effect (and\n            (not (athandpose ?arm ?block ?X_HB))\n            (atworldpose ?block ?X_WB) \n            (empty ?arm)\n        )\n    )\n\n    (:action stack ;place block on lowerblock\n        :parameters (?arm ?block ?X_WB ?X_HB ?lowerblock ?X_WL ?pre_q ?q) \n        :precondition (and\n            (clear ?lowerblock)\n            (ik ?arm ?block ?X_WB ?X_HB ?pre_q ?q) \n            (athandpose ?arm ?block ?X_HB)\n            (atworldpose ?lowerblock ?X_WL)\n            (atconf ?arm ?pre_q)\n            (block-support ?block ?X_WB ?lowerblock ?X_WL)\n            (forall (?otherblock)\n                (imply \n                    (block ?otherblock) \n                    (block-safe ?arm ?q ?otherblock)\n                ) \n            )\n            ;(forall (?otherarm)\n            ;    (imply \n            ;        (arm ?otherarm) \n            ;        (arm-safe ?arm ?pre_q ?otherarm)\n            ;    ) \n            ;)\n        )\n        :effect (and\n            (not (clear ?lowerblock))\n            (not (athandpose ?arm ?block ?X_HB))\n            (atworldpose ?block ?X_WB) \n            (empty ?arm)\n        )\n    )\n\n    (:action unstack\n        :parameters (?arm ?block ?X_WB ?X_HB ?lowerblock ?pre_q ?q)\n        :precondition (and\n            (clear ?block)\n            (ik ?arm ?block ?X_WB ?X_HB ?pre_q ?q)\n            (atworldpose ?block ?X_WB)\n            (empty ?arm)\n            (atconf ?arm ?pre_q)\n            (on-block ?block ?lowerblock)\n            (forall (?otherblock)\n                (imply \n                    (block ?otherblock) \n                    (block-safe ?arm ?q ?otherblock)\n                ) \n            )\n            ;(forall (?otherarm)\n            ;   (imply \n            ;       (arm ?otherarm) \n            ;       (arm-safe ?arm ?pre_q ?otherarm)\n            ;   ) \n            ;) \n        ) \n        :effect (and\n            (athandpose ?arm ?block ?X_HB)\n            (not (atworldpose ?block ?X_WB))\n            (not (empty ?arm))\n            (clear ?lowerblock)\n        )\n    )\n    \n)(define (stream blocks_world)\n\n    (:stream find-traj\n        :inputs (?arm ?q1 ?q2) \n        :fluents (atworldpose athandpose atconf)\n        :domain (and\n            (arm ?arm)\n            (conf ?arm ?q1)  \n            (conf ?arm ?q2)  \n        )\n        :outputs (?traj)\n        :certified (and\n            (motion ?arm ?q1 ?traj ?q2) \n        )\n    )\n    \n    (:stream find-grasp\n        :inputs (?block)\n        :domain (and\n            (block ?block) \n        ) \n        :outputs (?X_HB)\n        :certified (and\n            (handpose ?block ?X_HB)\n        )\n    )\n\n    (:stream find-ik\n        :inputs (?arm ?block ?X_WB ?X_HB)\n        :domain (and\n            (arm ?arm)\n            (worldpose ?block ?X_WB) \n            (handpose ?block ?X_HB)\n        ) \n        :outputs (?pre_q ?q)\n        :certified (and\n            (ik ?arm ?block ?X_WB ?X_HB ?pre_q ?q) \n            (conf ?arm ?pre_q)\n            (graspconf ?arm ?q)\n        )\n    )\n\n    (:stream check-colfree-block\n        :inputs (?arm ?q ?block ?X_WB)\n        :domain (and\n            (arm ?arm)\n            (block ?block) \n            (graspconf ?arm ?q)\n            (worldpose ?block ?X_WB)\n        )\n        :certified (and\n            (colfree-block ?arm ?q ?block ?X_WB)    \n        )\n    )\n\n    (:stream find-table-place\n        :inputs (?block ?table) \n        :domain (and\n            (block ?block)\n            (table ?table) \n        )\n        :outputs (?X_WB)\n        :certified (and\n            (worldpose ?block ?X_WB)    \n            (table-support ?block ?X_WB ?table)\n        )\n    )\n\n    (:stream find-block-place\n        :inputs (?block ?lowerblock ?X_WL) \n        :domain (and\n            (block ?block) \n            (block ?lowerblock) \n            (worldpose ?lowerblock ?X_WL)\n        )\n        :outputs (?X_WB)\n        :certified (and\n            (worldpose ?block ?X_WB) \n            (block-support ?block ?X_WB ?lowerblock ?X_WL)\n        )\n    )\n\n)": {
        "(arm, panda), (atconf, panda, [-0.   0.1  0.  -1.2 -0.   1.6 -0. ]), (atworldpose, blocker1, \nX_Wblocker1: \n\t[x,y,z] = [ 0.65   -0.1     0.3725]\n\t[r,p,y] = [-0.0001  0.0001 -0.    ]\n), (atworldpose, blue_block, \nX_Wblue_block: \n\t[x,y,z] = [ 0.65  0.1   0.32]\n\t[r,p,y] = [ 0. -0.  0.]\n), (atworldpose, green_block, \nX_Wgreen_block: \n\t[x,y,z] = [-0.65 -0.1   0.32]\n\t[r,p,y] = [ 0. -0.  0.]\n), (atworldpose, orange_block, \nX_Worange_block: \n\t[x,y,z] = [ 0.65 -0.1   0.32]\n\t[r,p,y] = [-0.  0. -0.]\n), (block, blocker1), (block, blue_block), (block, green_block), (block, orange_block), (block-support, blocker1, \nX_Wblocker1: \n\t[x,y,z] = [ 0.65   -0.1     0.3725]\n\t[r,p,y] = [-0.0001  0.0001 -0.    ]\n, orange_block, \nX_Worange_block: \n\t[x,y,z] = [ 0.65 -0.1   0.32]\n\t[r,p,y] = [-0.  0. -0.]\n), (clear, blocker1), (clear, blue_block), (clear, green_block), (conf, panda, [-0.   0.1  0.  -1.2 -0.   1.6 -0. ]), (empty, panda), (table, ('blue_table', 'base_link')), (table, ('green_table', 'base_link')), (table, ('purple_table', 'base_link')), (table, ('red_table', 'base_link')), (table-support, blue_block, \nX_Wblue_block: \n\t[x,y,z] = [ 0.65  0.1   0.32]\n\t[r,p,y] = [ 0. -0.  0.]\n, ('red_table', 'base_link')), (table-support, green_block, \nX_Wgreen_block: \n\t[x,y,z] = [-0.65 -0.1   0.32]\n\t[r,p,y] = [ 0. -0.  0.]\n, ('blue_table', 'base_link')), (table-support, orange_block, \nX_Worange_block: \n\t[x,y,z] = [ 0.65 -0.1   0.32]\n\t[r,p,y] = [-0.  0. -0.]\n, ('red_table', 'base_link')), (worldpose, blocker1, \nX_Wblocker1: \n\t[x,y,z] = [ 0.65   -0.1     0.3725]\n\t[r,p,y] = [-0.0001  0.0001 -0.    ]\n), (worldpose, blue_block, \nX_Wblue_block: \n\t[x,y,z] = [ 0.65  0.1   0.32]\n\t[r,p,y] = [ 0. -0.  0.]\n), (worldpose, green_block, \nX_Wgreen_block: \n\t[x,y,z] = [-0.65 -0.1   0.32]\n\t[r,p,y] = [ 0. -0.  0.]\n), (worldpose, orange_block, \nX_Worange_block: \n\t[x,y,z] = [ 0.65 -0.1   0.32]\n\t[r,p,y] = [-0.  0. -0.]\n)\n(on-block, green_block, blocker1), (on-block, orange_block, blue_block), (on-table, blocker1, ('blue_table', 'base_link')), (on-table, blue_block, ('green_table', 'base_link')), and,\n": "/home/agrobenj/drake-tamp/experiments/blocks_world/logs/2021-07-04-23:14:10/stats.json"
    },
    "(define (domain kitchen)\n    (:requirements :strips :derived-predicates :disjunctive-preconditions :equality)\n    (:predicates \n        ;static predicates\n        (item ?item)\n        (region ?region)\n        (sink ?region)\n        (burner ?region)\n        (cooked ?item)\n        (clean ?item)\n        ; I: item frame, W: world frame, H: hand frame\n        (worldpose ?item ?X_WI)\n        (handpose ?item ?X_HI)\n        ;7 DOF conf \n        (conf ?q)\n        (graspconf ?q)\n        ;sequence of 7 DOF confs, linearly interpolated\n        ; if item where at X_WI, would it be in region?\n        (contained ?item ?X_WI ?region)\n        (motion ?q1 ?traj ?q2)\n        (ik ?item ?X_WI ?X_HI ?pre_q ?q)\n        ; TODO check collisiosn between placed items and other items\n        (colfree ?q ?item ?X_WI)\n        ;(colfreeholding ?q ?itemholding ?X_HI ?item ?X_WI)\n\n\n        ;fluents predicates\n        (atconf ?q)\n        (atpose ?item ?X_WI)\n        (holding ?item ?X_HI)\n        (empty)\n\n        ;derived\n        (in ?item ?region)\n        (safe ?q ?item)\n        ;(safeplace ?q ?itemholding ?X_HI ?item)\n    )\n\n    ;(:functions\n        ;(distance ?traj)\n    ;)\n\n    (:derived (safe ?q ?item) \n        (or\n            (exists (?X_HI)\n                (and\n                    (holding ?item ?X_HI)\n                    (handpose ?item ?X_HI)\n                )\n            ) \n            (exists (?X_WI)\n                (and\n                    (colfree ?q ?item ?X_WI)\n                    (atpose ?item ?X_WI) \n                ) \n            ) \n        )\n    )\n\n    (:derived (in ?item ?region) \n        ; does there exist a pose ?X_WI such that ?item is at ?X_WI and \n        ; if it were it would be contained within ?region \n        (exists (?X_WI) (and\n                (contained ?item ?X_WI ?region) \n                (atpose ?item ?X_WI)\n            )\n        )\n    )\n\n    (:action move\n        :parameters(?q1 ?traj ?q2) \n        :precondition (and \n            (motion ?q1 ?traj ?q2)\n            (atconf ?q1)\n        )\n        :effect (and \n            (atconf ?q2)\n            (not (atconf ?q1))\n            ;(increase (total-cost) (distance ?traj)) \n            ; TODO(agro): add cost here\n        )\n    )\n\n    (:action pick\n        :parameters (?item ?X_WI ?X_HI ?pre_q ?q)\n        :precondition (and \n            (ik ?item ?X_WI ?X_HI ?pre_q ?q)\n            (atpose ?item ?X_WI)\n            (empty)\n            (atconf ?pre_q)\n            (forall (?otheritem)\n                (imply \n                    (item ?otheritem) \n                    (safe ?q ?otheritem)\n                ) \n            )\n        )\n        :effect (and\n            (holding ?item ?X_HI)\n            (not (atpose ?item ?X_WI))\n            (not (empty))\n        )\n    )\n\n    (:action place\n        :parameters (?item ?X_WI ?X_HI ?pre_q ?q)\n        :precondition (and \n            (ik ?item ?X_WI ?X_HI ?pre_q ?q)\n            (holding ?item ?X_HI)\n            (atconf ?pre_q)\n            (forall (?otheritem)\n                (imply \n                    (item ?otheritem) \n                    (safe ?q ?otheritem)\n                ) \n            )\n        )\n        :effect (and\n            (not (holding ?item ?X_HI))\n            (atpose ?item ?X_WI) \n            (empty)\n        )    \n    )\n\n    (:action wash\n        :parameters (?item ?region) \n        :precondition (and\n            (region ?region)\n            (item ?item) \n            (sink ?region) \n            (in ?item ?region) \n        )\n        :effect (and\n            (clean ?item)\n        )\n    )\n\n    (:action cook\n        :parameters (?item ?region) \n        :precondition (and \n            (item ?item)\n            (region ?region)\n            (burner ?region)\n            (clean ?item)\n            (in ?item ?region)\n        )\n        :effect (and\n            (cooked ?item)\n        )\n    )\n\n\n)(define (stream kitchen)\n\n    ;(:function (distance ?traj)\n        ;(traj ?traj)\n    ;)\n\n    (:stream find-traj\n        :inputs (?q1 ?q2) \n        :fluents (atpose holding)\n        :domain (and\n            (conf ?q1) \n            (conf ?q2)\n        )\n        :outputs (?traj)\n        :certified (and\n            (motion ?q1 ?traj ?q2) \n        )\n    )\n\n    (:stream find-grasp\n        :inputs (?item)\n        :domain (and\n            (item ?item) \n        ) \n        :outputs (?X_HI)\n        :certified (and\n            (handpose ?item ?X_HI)\n        )\n    )\n\n    (:stream find-place\n        :inputs (?item ?region) \n        :domain (and\n            (item ?item) \n            (region ?region)\n        ) \n        :outputs (?X_WI)\n        :certified (and \n            (contained ?item ?X_WI ?region)\n            (worldpose ?item ?X_WI)\n        )\n    )\n\n    (:stream find-ik\n        :inputs (?item ?X_WI ?X_HI) \n        :domain (and\n            (worldpose ?item ?X_WI)\n            (handpose ?item ?X_HI)\n        ) \n        :outputs (?pre_q ?q)\n        :certified (and \n            (ik ?item ?X_WI ?X_HI ?pre_q ?q)\n            (conf ?pre_q)\n            (graspconf ?q)\n        )\n    )\n\n    (:stream check-safe\n        :inputs (?q ?item ?X_WI) \n        :domain (and\n            (item ?item)\n            (graspconf ?q)\n            (worldpose ?item ?X_WI)\n        )\n        :certified (and\n            (colfree ?q ?item ?X_WI) \n        )\n    )\n\n    \n\n    ;(:stream check-safe-place\n    ;    :inputs (?q ?itemholding ?X_HI ?item ?X_WI) \n    ;    :domain (and\n    ;        (item ?itemholding)\n    ;        (item ?item)\n    ;        (graspconf ?q)\n    ;        (worldpose ?item ?X_WI)\n    ;        (handpose ?itemholding ?X_HI)\n    ;    )\n    ;    :certified (and\n    ;        (colfreeholding ?q ?itemholding ?X_HI ?item ?X_WI) \n    ;    )\n    ;)\n\n\n    ;(:stream check-pick\n    ;    :inputs (?grasp_q ?item ?X_WI)\n    ;    :domain (and\n    ;        (item ?item) \n    ;        (conf ?grasp_q)\n    ;        (worldpose ?item ?X_WI)\n    ;    ) \n    ;    :certified (safeikfree ?grasp_q ?item ?X_WI)\n    ;)\n\n    ;(:stream check-place\n    ;    :inputs (?place_q ?holdingitem ?X_HI ?worlditem ?X_WI)\n    ;    :domain (and\n    ;        (item ?holdingitem) \n    ;        (item ?worlditem)\n    ;        (conf ?place_q)\n    ;        (worldpose ?worlditem ?X_WI)\n    ;        (handpose ?holdingitem ?X_HI)\n    ;    ) \n    ;    :certified (safeikholding ?place_q ?holdingitem ?X_HI ?worlditem ?X_WI)\n    ;)\n)": {
        "(atconf, [-0.   0.1  0.  -1.2 -0.   1.6 -0. ]), (atpose, cabbage1, \nX_Wcabbage1: \n\t[x,y,z] = [ 0.5    0.05   0.335]\n\t[r,p,y] = [ 0. -0. -0.]\n), (atpose, glass1, \nX_Wglass1: \n\t[x,y,z] = [-0.6    0.1    0.335]\n\t[r,p,y] = [-0.  0.  0.]\n), (burner, ('stove', 'burner1')), (burner, ('stove', 'burner2')), (burner, ('stove', 'burner3')), (burner, ('stove', 'burner4')), (burner, ('stove', 'burner5')), (conf, [-0.   0.1  0.  -1.2 -0.   1.6 -0. ]), (contained, cabbage1, \nX_Wcabbage1: \n\t[x,y,z] = [ 0.5    0.05   0.335]\n\t[r,p,y] = [ 0. -0. -0.]\n, ('tray', 'base_link')), (contained, glass1, \nX_Wglass1: \n\t[x,y,z] = [-0.6    0.1    0.335]\n\t[r,p,y] = [-0.  0.  0.]\n, ('leftplacemat', 'leftside')), (empty), (item, cabbage1), (item, glass1), (region, ('leftplacemat', 'leftside')), (region, ('leftplacemat', 'rightside')), (region, ('leftplate', 'base_link')), (region, ('rightplacemat', 'leftside')), (region, ('rightplacemat', 'rightside')), (region, ('rightplate', 'base_link')), (region, ('sink', 'base_link')), (region, ('stove', 'burner1')), (region, ('stove', 'burner2')), (region, ('stove', 'burner3')), (region, ('stove', 'burner4')), (region, ('stove', 'burner5')), (region, ('stove', 'infopad')), (region, ('tray', 'base_link')), (sink, ('sink', 'base_link')), (worldpose, cabbage1, \nX_Wcabbage1: \n\t[x,y,z] = [ 0.5    0.05   0.335]\n\t[r,p,y] = [ 0. -0. -0.]\n), (worldpose, glass1, \nX_Wglass1: \n\t[x,y,z] = [-0.6    0.1    0.335]\n\t[r,p,y] = [-0.  0.  0.]\n)\n(clean, glass1), (cooked, cabbage1), (in, glass1, ('leftplacemat', 'leftside')), and,\n": "/home/agrobenj/drake-tamp/experiments/kitchen_no_fluents/logs/2021-07-04-20:24:40/stats.json",
        "(atconf, [-0.   0.1  0.  -1.2 -0.   1.6 -0. ]), (atpose, cabbage1, \nX_Wcabbage1: \n\t[x,y,z] = [ 0.5    0.05   0.335]\n\t[r,p,y] = [ 0. -0. -0.]\n), (atpose, glass1, \nX_Wglass1: \n\t[x,y,z] = [-0.6    0.1    0.335]\n\t[r,p,y] = [-0.  0.  0.]\n), (burner, ('stove', 'burner1')), (burner, ('stove', 'burner2')), (burner, ('stove', 'burner3')), (burner, ('stove', 'burner4')), (burner, ('stove', 'burner5')), (conf, [-0.   0.1  0.  -1.2 -0.   1.6 -0. ]), (contained, cabbage1, \nX_Wcabbage1: \n\t[x,y,z] = [ 0.5    0.05   0.335]\n\t[r,p,y] = [ 0. -0. -0.]\n, ('tray', 'base_link')), (contained, glass1, \nX_Wglass1: \n\t[x,y,z] = [-0.6    0.1    0.335]\n\t[r,p,y] = [-0.  0.  0.]\n, ('leftplacemat', 'leftside')), (empty), (item, cabbage1), (item, glass1), (region, ('leftplacemat', 'leftside')), (region, ('leftplacemat', 'rightside')), (region, ('leftplate', 'base_link')), (region, ('rightplacemat', 'leftside')), (region, ('rightplacemat', 'rightside')), (region, ('rightplate', 'base_link')), (region, ('sink', 'base_link')), (region, ('stove', 'burner1')), (region, ('stove', 'burner2')), (region, ('stove', 'burner3')), (region, ('stove', 'burner4')), (region, ('stove', 'burner5')), (region, ('stove', 'infopad')), (region, ('tray', 'base_link')), (sink, ('sink', 'base_link')), (worldpose, cabbage1, \nX_Wcabbage1: \n\t[x,y,z] = [ 0.5    0.05   0.335]\n\t[r,p,y] = [ 0. -0. -0.]\n), (worldpose, glass1, \nX_Wglass1: \n\t[x,y,z] = [-0.6    0.1    0.335]\n\t[r,p,y] = [-0.  0.  0.]\n)\n(clean, glass1), (in, glass1, ('leftplacemat', 'leftside')), and,\n": "/home/agrobenj/drake-tamp/experiments/kitchen_no_fluents/logs/2021-07-04-20:24:20/stats.json"
    }
}